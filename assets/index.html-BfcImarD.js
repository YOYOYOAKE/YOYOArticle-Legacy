import{_ as s,c as a,d as e,o as t}from"./app-DcByCcgZ.js";const n={};function h(l,i){return t(),a("div",null,i[0]||(i[0]=[e(`<p>与 JavaScript 和 Python 不同，Java是一种静态类型语言。这就意味着在声明变量时需要同时声明其变量类型。</p><p>而同样的，Java 也分为基本数据类型和引用数据类型。</p><h2 id="_1-基本数据类型" tabindex="-1"><a class="header-anchor" href="#_1-基本数据类型"><span>1 基本数据类型</span></a></h2><h3 id="_1-1-布尔型" tabindex="-1"><a class="header-anchor" href="#_1-1-布尔型"><span>1.1 布尔型</span></a></h3><p>布尔型仅存储两个值：<code>true</code>和<code>false</code>，即真与假。</p><p>在 Java 中使用<code>boolean</code>来声明布尔型变量。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">boolean</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> isStudent</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> true</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">boolean</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> hasMoney</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> false</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>理论上来讲布尔型的大小应该仅占用一个字节，但事实上并非如此。主要有两种说法。</p><p>第一种说法认为，对于单独声明的布尔型变量，JVM将其按整型来处理，即占用 4 个字节。若将其作为数组元素来使用，JVM会将其按字节型来处理，即占用 1 个字节。</p><p>第二种说法认为，布尔型具体占用的大小是不确定的，取决于 JVM 的具体实现。</p><h3 id="_1-2-数值型" tabindex="-1"><a class="header-anchor" href="#_1-2-数值型"><span>1.2 数值型</span></a></h3><h4 id="_1-2-1-字节型" tabindex="-1"><a class="header-anchor" href="#_1-2-1-字节型"><span>1.2.1 字节型</span></a></h4><p>一个字节型变量占用 1 字节的空间，而 1 Byte 等于 8 bit，因此一个字节型变量使用 8 个二进制位存储数据。</p><p>其中符号固定占用一位，剩余 7 位存储数据。因此字节型可以表示 -128 ~ 127 之间的整数。</p><p>在 Java 中使用<code>byte</code>声明字节型变量。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">byte</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> number</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 66</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="_1-2-2-短整型" tabindex="-1"><a class="header-anchor" href="#_1-2-2-短整型"><span>1.2.2 短整型</span></a></h4><p>一个短整型变量占用 2 字节的空间。</p><p>符号表示占用一位，剩余 15 位保存存储数据。因此字节型可以表示 -32,768 ~ 32,767 之间的整数。</p><p>在 Java 中使用<code>short</code>声明短整型变量。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">short</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> number</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 6666</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="_1-2-3-整型" tabindex="-1"><a class="header-anchor" href="#_1-2-3-整型"><span>1.2.3 整型</span></a></h4><p>一个整型变量占用 4 字节的空间。</p><p>符号表示占用一位，剩余 31 位保存存储数据。因此字节型可以表示 -2,147,483,648 ~ 2,147,483,647 之间的整数。</p><p>在 Java 中使用<code>int</code>声明整型变量。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> number</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 666666666</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="_1-2-4-长整型" tabindex="-1"><a class="header-anchor" href="#_1-2-4-长整型"><span>1.2.4 长整型</span></a></h4><p>一个长整型变量占用 8 字节的空间。</p><p>符号表示占用一位，剩余 63 位保存存储数据。因此字节型可以表示 -9,223,372,036,854,775,808 ~ 9,223,372,036,854,775,807 之间的整数。</p><p>在 Java 中使用<code>long</code>声明整型变量。需要注意的是，长整型变量在数字之后还要加上<code>L</code>进行标识。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">long</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> number</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 66666666666666L</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="_1-2-5-单精度浮点型" tabindex="-1"><a class="header-anchor" href="#_1-2-5-单精度浮点型"><span>1.2.5 单精度浮点型</span></a></h4><p>一个单精度浮点型变量占用 4 字节的空间。</p><p>其中，符号占用 1 位，指数占用 8 位，剩余 23 位存储数字。</p><p>在 Java 中使用<code>float</code>声明单精度浮点型变量。需要注意的是，单精度浮点型变量在数字之后还要加上<code>f</code>进行标识。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">float</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> number</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 66.666f</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="_1-2-6-双精度浮点型" tabindex="-1"><a class="header-anchor" href="#_1-2-6-双精度浮点型"><span>1.2.6 双精度浮点型</span></a></h4><p>一个双精度浮点型变量占用 8 字节的空间。</p><p>其中，符号占用 1 位，指数占用 11 位，剩余 52 位存储数字。</p><p>在 Java 中使用<code>double</code>声明双精度浮点型变量。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">double</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> number</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 66666.666666</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_1-3-字符型" tabindex="-1"><a class="header-anchor" href="#_1-3-字符型"><span>1.3 字符型</span></a></h3><p>字符型变量用于存储 Unicode 字符。一个字符型变量占用 2 字节的空间。</p><p>在 Java 中使用<code>char</code>声明字符型变量。需要注意的是，字符字面量应该用单引号包裹，而非双引号。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">char</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> letter</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">A</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="_2-引用数据类型" tabindex="-1"><a class="header-anchor" href="#_2-引用数据类型"><span>2 引用数据类型</span></a></h2><p>除了基本数据类型外的，都为引用数据类型。在存储引用数据类型时，并不存储其本身的值，而是存储其内存地址（有些语言中叫做“引用”），因此得名。</p><p>常见的引用数据类型有字符串（String）和数组（Array），这些等到后面再讲。</p><p>除此之外，Java 还有一种特殊的包装器类型（Wrapper Types），用于将八种基本数据类型转换为对应的引用数据类型。</p><table><thead><tr><th style="text-align:center;">包装器类型</th><th style="text-align:center;">基本数据类型</th></tr></thead><tbody><tr><td style="text-align:center;">Boolean</td><td style="text-align:center;">boolean</td></tr><tr><td style="text-align:center;">Byte</td><td style="text-align:center;">byte</td></tr><tr><td style="text-align:center;">Short</td><td style="text-align:center;">short</td></tr><tr><td style="text-align:center;">Integer</td><td style="text-align:center;">int</td></tr><tr><td style="text-align:center;">Long</td><td style="text-align:center;">long</td></tr><tr><td style="text-align:center;">Float</td><td style="text-align:center;">float</td></tr><tr><td style="text-align:center;">Double</td><td style="text-align:center;">double</td></tr><tr><td style="text-align:center;">Character</td><td style="text-align:center;">char</td></tr></tbody></table><p>包装器类型中封装了针对基本数据类型的各种实用方法，并兼容需要对象类型的场景。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 使用 Integer 包装器类型</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Integer</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> integerValue</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Integer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">42</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">整数值: </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> integerValue</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 将字符串转换为整数</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">String</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> numberString</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">123</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> parsedNumber</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Integer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">parseInt</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">numberString</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">整数值: </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> parsedNumber</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 使用 Character 包装器类型</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Character</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> charValue</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Character</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">A</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">字符: </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> charValue</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 检查字符是否为数字</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">char</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> testChar</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">9</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Character</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">isDigit</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">testChar</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">))</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">字符是个数字.</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从 Java 5 开始，自动装箱（Autoboxing）和自动拆箱（Unboxing）机制允许基本数据类型和包装器类型之间自动转换，而无需显式地调用构造方法或转换方法。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Integer</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> integerValue</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 42</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 自动装箱</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> primitiveValue</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> integerValue</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 自动拆箱</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-数据类型转换" tabindex="-1"><a class="header-anchor" href="#_3-数据类型转换"><span>3 数据类型转换</span></a></h2><h3 id="_3-1-自动类型转换" tabindex="-1"><a class="header-anchor" href="#_3-1-自动类型转换"><span>3.1 自动类型转换</span></a></h3><p>自动类型转换通常发生在有不同数据类型参与运算的表达式中。自动类型转换遵循以下规则：</p><ul><li>如果任一操作数是 double 类型，其他操作数将被转换为 double 类型；</li><li>否则，如果任一操作数是 float 类型，其他操作数将被转换为 float 类型；</li><li>否则，如果任一操作数是 long 类型，其他操作数将被转换为 long 类型；</li><li>否则，所有操作数将被转换为 int 类型。</li></ul><p>不难发现，自动类型转换都有朝着较大数据类型转换的趋势。</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>byte -&gt; short -&gt; int -&gt; long -&gt; float -&gt; double</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>char 类型较为特殊，不会被转换为浮点型。</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>char -&gt; int -&gt; long -&gt; float -&gt; double</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_3-2-强制类型转换" tabindex="-1"><a class="header-anchor" href="#_3-2-强制类型转换"><span>3.2 强制类型转换</span></a></h3><p>在</p><ul><li>将较大的数据类型转换为较小的数据类型；</li><li>将浮点数转换为整数；</li><li>将字符类型转换为数值类型</li></ul><p>时，需要进行强制类型转换。</p><p>在进行强制类型转换时，需要显式声明转换后的数据类型。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">double</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> doubleValue</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 42.8</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> intValue</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> doubleValue</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">整数值: </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> intValue</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 输出：整数值: 42</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,68)]))}const p=s(n,[["render",h]]),d=JSON.parse('{"path":"/java/basic/01/","title":"Part 1 Java 数据类型","lang":"zh-CN","frontmatter":{"title":"Part 1 Java 数据类型","createTime":"2025/04/20 14:33:52","permalink":"/java/basic/01/","description":"与 JavaScript 和 Python 不同，Java是一种静态类型语言。这就意味着在声明变量时需要同时声明其变量类型。 而同样的，Java 也分为基本数据类型和引用数据类型。 1 基本数据类型 1.1 布尔型 布尔型仅存储两个值：true和false，即真与假。 在 Java 中使用boolean来声明布尔型变量。 理论上来讲布尔型的大小应该仅占...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Part 1 Java 数据类型\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-22T11:02:46.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://www.yoake.cc/java/basic/01/"}],["meta",{"property":"og:site_name","content":"YOYOArticle"}],["meta",{"property":"og:title","content":"Part 1 Java 数据类型"}],["meta",{"property":"og:description","content":"与 JavaScript 和 Python 不同，Java是一种静态类型语言。这就意味着在声明变量时需要同时声明其变量类型。 而同样的，Java 也分为基本数据类型和引用数据类型。 1 基本数据类型 1.1 布尔型 布尔型仅存储两个值：true和false，即真与假。 在 Java 中使用boolean来声明布尔型变量。 理论上来讲布尔型的大小应该仅占..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-22T11:02:46.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-22T11:02:46.000Z"}]]},"readingTime":{"minutes":4.98,"words":1493},"git":{"updatedTime":1745319766000,"contributors":[{"name":"YOAKE","username":"YOAKE","email":"yo2yoake@outlook.com","commits":5,"avatar":"https://avatars.githubusercontent.com/YOAKE?v=4","url":"https://github.com/YOAKE"}]},"autoDesc":true,"filePathRelative":"notes/repos/java/basic/Part-01.md","headers":[]}');export{p as comp,d as data};
