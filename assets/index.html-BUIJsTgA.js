import{_ as r,c as k,d as t,b as d,w as a,r as p,o as c,a as s,e as i}from"./app-DcByCcgZ.js";const o={};function g(v,e){const h=p("Tabs");return c(),k("div",null,[e[12]||(e[12]=t(`<blockquote><p>Docker 被广泛用于服务器上，为各种服务提供相对独立的轻量级运行环境，容器与容器之间互不影响。</p></blockquote><blockquote><p>而正是 Docker 容器的良好隔离性质，使得容器中的服务并不能直接访问到其他容器中的服务，导致各种不便。</p></blockquote><blockquote><p>而 Docker 网络同样是容器环境的一部分，将容器从宿主机的网络环境中独立出来，相互连接。</p></blockquote><h2 id="_1-docker-网络模式" tabindex="-1"><a class="header-anchor" href="#_1-docker-网络模式"><span>1 Docker 网络模式</span></a></h2><p>Docker 提供了四种网络模式，分别是 host、bridge、none、container。</p><p>Docker 在安装之时会默认创建 host、bridge、none 模式对应的网络。</p><h3 id="_1-1-host" tabindex="-1"><a class="header-anchor" href="#_1-1-host"><span>1.1 host</span></a></h3><p>你可以使用<code>--network host</code>参数指定容器使用 host 网络模式。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> run</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --network</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> host</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --name</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> alpine_container</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> alpine</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ip</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> addr</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>演示使用的 Alpine 镜像。由于空 Alpine 镜像在启动后会立即退出，因此我们直接让其执行<code>ip addr</code>命令。</p><p>被设定为 host 网络模式的容器不再拥有自己的虚拟网卡，从而拥有和宿主机一样的 IP 地址。这一点我们可以在宿主机中执行<code>ip addr</code>来验证。</p><p>host 网络模式显然便于访问容器提供的服务，但同时也降低了隔离性。</p><p>而且容器映射到外部的端口将被忽略。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> run</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --network</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> host</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --name</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> alpine_container</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -p</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 4700:4700</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> alpine</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>WARNING: Published ports are discarded when using host network mode</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_1-2-none" tabindex="-1"><a class="header-anchor" href="#_1-2-none"><span>1.2 none</span></a></h3><p>使用<code>--network none</code>参数指定容器使用 none 网络模式。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> run</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --network</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> none</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --name</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> alpine_container</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> alpine</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ip</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> addr</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN qlen 1000</span></span>
<span class="line"><span>    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span></span>
<span class="line"><span>    inet 127.0.0.1/8 scope host lo</span></span>
<span class="line"><span>       valid_lft forever preferred_lft forever</span></span>
<span class="line"><span>    inet6 ::1/128 scope host</span></span>
<span class="line"><span>       valid_lft forever preferred_lft forever</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>被设定为 none 网络模式的容器将获得一个完全隔离的网络环境，容器内部只能使用 localhost 上的网络设备。</p><h3 id="_1-3-bridge" tabindex="-1"><a class="header-anchor" href="#_1-3-bridge"><span>1.3 bridge</span></a></h3><p>bridge 网络模式是 Docker 的默认网络。</p><p>Docker 进程启动时会在宿主机上创建一个名为<code>docker0</code>的虚拟网桥。宿主机上启动的 Docker 容器会默认连接到这个虚拟网桥上，从而所有容器都通过<code>docker0</code>连接在一个二层网络中。</p><p>在这种模式下，Docker 会为每个容器创建虚拟网卡，容器与容器之间可以通过这个虚拟网卡指定的 IP 地址进行通信。</p><p>我们运行两个 Alpine 容器，并进入容器内部执行<code>ip addr</code>。</p>`,25)),d(h,{id:"72",data:[{id:"容器 1"},{id:"容器 2"}]},{title0:a(({value:n,isActive:l})=>e[0]||(e[0]=[i("容器 1")])),title1:a(({value:n,isActive:l})=>e[1]||(e[1]=[i("容器 2")])),tab0:a(({value:n,isActive:l})=>e[2]||(e[2]=[s("div",{class:"language-text line-numbers-mode","data-highlighter":"shiki","data-ext":"text",style:{"--shiki-light":"#393a34","--shiki-dark":"#dbd7caee","--shiki-light-bg":"#ffffff","--shiki-dark-bg":"#121212"}},[s("pre",{class:"shiki shiki-themes vitesse-light vitesse-dark vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",null,"598: eth0@if599: <BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN> mtu 1500 qdisc noqueue state UP")]),i(`
`),s("span",{class:"line"},[s("span",null,"    link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff")]),i(`
`),s("span",{class:"line"},[s("span",null,"    inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0")]),i(`
`),s("span",{class:"line"},[s("span",null,"       valid_lft forever preferred_lft forever")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)])),tab1:a(({value:n,isActive:l})=>e[3]||(e[3]=[s("div",{class:"language-text line-numbers-mode","data-highlighter":"shiki","data-ext":"text",style:{"--shiki-light":"#393a34","--shiki-dark":"#dbd7caee","--shiki-light-bg":"#ffffff","--shiki-dark-bg":"#121212"}},[s("pre",{class:"shiki shiki-themes vitesse-light vitesse-dark vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",null,"600: eth0@if601: <BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN> mtu 1500 qdisc noqueue state UP")]),i(`
`),s("span",{class:"line"},[s("span",null,"    link/ether 02:42:ac:11:00:03 brd ff:ff:ff:ff:ff:ff")]),i(`
`),s("span",{class:"line"},[s("span",null,"    inet 172.17.0.3/16 brd 172.17.255.255 scope global eth0")]),i(`
`),s("span",{class:"line"},[s("span",null,"       valid_lft forever preferred_lft forever")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)])),_:1}),e[13]||(e[13]=t(`<p>注意到容器 1 的 IP 地址为 172.17.0.2，容器 2 的 IP 地址为 172.17.0.3。</p><p>在容器 2 内部 ping 容器 1 的 IP，证明两个容器是可以通过虚拟网桥相通。</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>PING 172.17.0.2 (172.17.0.2): 56 data bytes</span></span>
<span class="line"><span>64 bytes from 172.17.0.2: seq=0 ttl=64 time=0.439 ms</span></span>
<span class="line"><span>64 bytes from 172.17.0.2: seq=1 ttl=64 time=0.123 ms</span></span>
<span class="line"><span>64 bytes from 172.17.0.2: seq=2 ttl=64 time=0.137 ms</span></span>
<span class="line"><span>64 bytes from 172.17.0.2: seq=3 ttl=64 time=0.084 ms</span></span>
<span class="line"><span>^C</span></span>
<span class="line"><span>--- 172.17.0.2 ping statistics ---</span></span>
<span class="line"><span>4 packets transmitted, 4 packets received, 0% packet loss</span></span>
<span class="line"><span>round-trip min/avg/max = 0.084/0.195/0.439 ms</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-4-container" tabindex="-1"><a class="header-anchor" href="#_1-4-container"><span>1.4 container</span></a></h3><p>container 网络模式需要在创建容器时指定一个已经创建好的容器，新创建的容器将不会拥有自己的虚拟网卡，而是和指定容器共用网卡。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> run</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --name</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> alpine_1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> alpine</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> sleep</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 3600</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> run</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --network</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> container:alpine_1</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --name</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> alpine_2</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> alpine</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> sleep</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 3600</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>同样分别进入容器查看<code>ip addr</code>。</p>`,7)),d(h,{id:"97",data:[{id:"容器 1"},{id:"容器 2"}]},{title0:a(({value:n,isActive:l})=>e[4]||(e[4]=[i("容器 1")])),title1:a(({value:n,isActive:l})=>e[5]||(e[5]=[i("容器 2")])),tab0:a(({value:n,isActive:l})=>e[6]||(e[6]=[s("div",{class:"language-text line-numbers-mode","data-highlighter":"shiki","data-ext":"text",style:{"--shiki-light":"#393a34","--shiki-dark":"#dbd7caee","--shiki-light-bg":"#ffffff","--shiki-dark-bg":"#121212"}},[s("pre",{class:"shiki shiki-themes vitesse-light vitesse-dark vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",null,"602: eth0@if603: <BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN> mtu 1500 qdisc noqueue state UP")]),i(`
`),s("span",{class:"line"},[s("span",null,"    link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff")]),i(`
`),s("span",{class:"line"},[s("span",null,"    inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0")]),i(`
`),s("span",{class:"line"},[s("span",null,"       valid_lft forever preferred_lft forever")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)])),tab1:a(({value:n,isActive:l})=>e[7]||(e[7]=[s("div",{class:"language-text line-numbers-mode","data-highlighter":"shiki","data-ext":"text",style:{"--shiki-light":"#393a34","--shiki-dark":"#dbd7caee","--shiki-light-bg":"#ffffff","--shiki-dark-bg":"#121212"}},[s("pre",{class:"shiki shiki-themes vitesse-light vitesse-dark vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",null,"602: eth0@if603: <BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN> mtu 1500 qdisc noqueue state UP")]),i(`
`),s("span",{class:"line"},[s("span",null,"    link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff")]),i(`
`),s("span",{class:"line"},[s("span",null,"    inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0")]),i(`
`),s("span",{class:"line"},[s("span",null,"       valid_lft forever preferred_lft forever")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)])),_:1}),e[14]||(e[14]=t('<p>这说明二者共用同一虚拟网卡、同一 IP。同样，若两个容器中同时监听同一端口，将会发生冲突。</p><p>需要注意的是，此时容器 2 并无自己的虚拟网卡，若将容器 1 停止，容器 2 将只剩下 localhost 网络。</p><h2 id="_2-docker-自定义网络" tabindex="-1"><a class="header-anchor" href="#_2-docker-自定义网络"><span>2 Docker 自定义网络</span></a></h2><p>上述几种方式显然不够灵活，而自定义网络可以将任意容器添加进网络中。实际开发中也更建议使用自定义网络。</p><p>创建自定义网络：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> network</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> create</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> CUSTOM_NETWORK</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在创建容器时连接到自定义网络：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> run</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --net</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> CUSTOM_NETWORK</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --name</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> CONTAINER_NAME</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> IMAGE</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>连接已有容器到自定义网络：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> network</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> connect</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> CUSTOM_NETWORK</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> CONTAINER_NAME</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>断开容器连接的自定义网络：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> network</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> disconnect</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> CUSTOM_NETWORK</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> CONTAINER_NAME</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>移除自定义网络：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> network</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> rm</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> CUSTOM_NETWORK</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>注意，如果某个容器在创建之时指定了自定义网络，那么这个自定义网络无法删除。</p><h2 id="_3-实战-一种为任意容器提供网络代理的优雅方法" tabindex="-1"><a class="header-anchor" href="#_3-实战-一种为任意容器提供网络代理的优雅方法"><span>3 实战：一种为任意容器提供网络代理的优雅方法</span></a></h2><p>网络代理是在服务器上有着非常普遍的应用，然而对于 Docker 容器内部的服务而言，很难访问到宿主机上的网络代理。</p><p>如果代理同样也是部署在容器中，就可以通过上述提到的 bridge 网络模式借助 IP 地址进行通信。</p><p>看起来很合理，对吧？但是 IP 地址是会变的，因此这种方法并不可行。</p><p>我们选择建立自定义网络。在自定义网络中，Docker 实现了一个内部 DNS 服务器，使得处于同一网络内的容器可以通过<strong>容器名称</strong>进行通信。</p><p>这里采用 Clash 提供网络代理，SillyTavern 作为需要网络代理的应用程序容器。</p><h3 id="_3-1-创建容器并连接网络" tabindex="-1"><a class="header-anchor" href="#_3-1-创建容器并连接网络"><span>3.1 创建容器并连接网络</span></a></h3><p>为了方便管理，这里使用 Docker Compose。</p>',23)),d(h,{id:"164",data:[{id:"Clash"},{id:"SillyTavern"}]},{title0:a(({value:n,isActive:l})=>e[8]||(e[8]=[i("Clash")])),title1:a(({value:n,isActive:l})=>e[9]||(e[9]=[i("SillyTavern")])),tab0:a(({value:n,isActive:l})=>e[10]||(e[10]=[s("div",{class:"language-yml line-numbers-mode","data-highlighter":"shiki","data-ext":"yml",style:{"--shiki-light":"#393a34","--shiki-dark":"#dbd7caee","--shiki-light-bg":"#ffffff","--shiki-dark-bg":"#121212"}},[s("pre",{class:"shiki shiki-themes vitesse-light vitesse-dark vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#998418","--shiki-dark":"#B8A965"}},"version"),s("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},":"),s("span",{style:{"--shiki-light":"#B5695977","--shiki-dark":"#C98A7D77"}}," '"),s("span",{style:{"--shiki-light":"#B56959","--shiki-dark":"#C98A7D"}},"3"),s("span",{style:{"--shiki-light":"#B5695977","--shiki-dark":"#C98A7D77"}},"'")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#998418","--shiki-dark":"#B8A965"}},"services"),s("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},":")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#998418","--shiki-dark":"#B8A965"}},"  clash"),s("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},":")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#998418","--shiki-dark":"#B8A965"}},"    image"),s("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},":"),s("span",{style:{"--shiki-light":"#B56959","--shiki-dark":"#C98A7D"}}," laoyutang/clash-and-dashboard:latest")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#998418","--shiki-dark":"#B8A965"}},"    container_name"),s("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},":"),s("span",{style:{"--shiki-light":"#B56959","--shiki-dark":"#C98A7D"}}," clash")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#998418","--shiki-dark":"#B8A965"}},"    restart"),s("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},":"),s("span",{style:{"--shiki-light":"#B56959","--shiki-dark":"#C98A7D"}}," always")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#998418","--shiki-dark":"#B8A965"}},"    logging"),s("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},":")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#998418","--shiki-dark":"#B8A965"}},"      options"),s("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},":")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#998418","--shiki-dark":"#B8A965"}},"        max-size"),s("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},":"),s("span",{style:{"--shiki-light":"#B56959","--shiki-dark":"#C98A7D"}}," 1m")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#998418","--shiki-dark":"#B8A965"}},"    volumes"),s("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},":")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"      -"),s("span",{style:{"--shiki-light":"#B56959","--shiki-dark":"#C98A7D"}}," ./data/config.yaml:/root/.config/clash/config.yaml")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#998418","--shiki-dark":"#B8A965"}},"    ports"),s("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},":")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"      -"),s("span",{style:{"--shiki-light":"#B5695977","--shiki-dark":"#C98A7D77"}},' "'),s("span",{style:{"--shiki-light":"#B56959","--shiki-dark":"#C98A7D"}},"7888:8080"),s("span",{style:{"--shiki-light":"#B5695977","--shiki-dark":"#C98A7D77"}},'"')]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"      -"),s("span",{style:{"--shiki-light":"#B5695977","--shiki-dark":"#C98A7D77"}},' "'),s("span",{style:{"--shiki-light":"#B56959","--shiki-dark":"#C98A7D"}},"7890:7890"),s("span",{style:{"--shiki-light":"#B5695977","--shiki-dark":"#C98A7D77"}},'"')])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)])),tab1:a(({value:n,isActive:l})=>e[11]||(e[11]=[s("p",null,[i("SillyTavern仓库中已经提供"),s("code",null,"docker-compose.yml"),i("文件。")],-1)])),_:1}),e[15]||(e[15]=t(`<p>分别执行<code>docker compose up -d</code>。</p><p>需要说明的是，使用 Docker Compose 创建的容器都会自动创建一个<code>_default</code>网络。</p><p>如<code>clash</code>容器在创建之时，就会同时创建<code>clash_default</code>网络。</p><p>接下来将<code>sillytavern</code>容器连接至<code>clash</code>网络。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> network</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> connect</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> clash_default</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> sillytavern</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>进入<code>sillytavern</code>容器内部检查网络能否接通。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> exec</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -it</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> sillytavern</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> sh</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Ping一下<code>clash</code>容器。得益于自定义网络的内嵌 DNS 服务，我们可以使用容器名称进行通信。</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">ping</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> clash</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>PING clash (192.168.16.2): 56 data bytes</span></span>
<span class="line"><span>64 bytes from 192.168.16.2: seq=0 ttl=64 time=0.216 ms</span></span>
<span class="line"><span>64 bytes from 192.168.16.2: seq=1 ttl=64 time=0.100 ms</span></span>
<span class="line"><span>64 bytes from 192.168.16.2: seq=2 ttl=64 time=0.109 ms</span></span>
<span class="line"><span>64 bytes from 192.168.16.2: seq=3 ttl=64 time=0.088 ms</span></span>
<span class="line"><span>^C</span></span>
<span class="line"><span>--- clash ping statistics ---</span></span>
<span class="line"><span>4 packets transmitted, 4 packets received, 0% packet loss</span></span>
<span class="line"><span>round-trip min/avg/max = 0.088/0.128/0.216 ms</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明可以接通<code>clash</code>容器。</p><h3 id="_3-2-启用-sillytavern-代理" tabindex="-1"><a class="header-anchor" href="#_3-2-启用-sillytavern-代理"><span>3.2 启用 SillyTavern 代理</span></a></h3><p>在 SillyTavern 的配置文件<code>config.yaml</code>中启用代理。</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">requestProxy</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  enabled</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> true</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  url</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> http://clash:7890</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  bypass</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    -</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> localhost</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    -</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 127.0.0.1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重启容器应用设置。</p><h3 id="_3-5-管理-clash-服务" tabindex="-1"><a class="header-anchor" href="#_3-5-管理-clash-服务"><span>3.5 管理 Clash 服务</span></a></h3><p>这个 Clash 镜像提供了一个管理面板，借助它可以管理 Clash 服务。</p><p>其默认端口为<code>7888</code>，默认的<code>docker-compose.yml</code>已经映射出了这个端口，只需在云服务器安全组（如果有的话）和系统防火墙中放行<code>7888</code>端口即可。</p><p>进入管理面板后需要在设置中打开<strong>允许来自局域网的连接</strong>。</p><h3 id="_3-6-可能有用-关于-clash-管理面板的安全性" tabindex="-1"><a class="header-anchor" href="#_3-6-可能有用-关于-clash-管理面板的安全性"><span>3.6 （可能有用）关于 Clash 管理面板的安全性</span></a></h3><p>如你所见，这个 Clash 面板比较简单，当你把端口暴露到公网上后，任何人都可以访问你的面板，极大降低了安全性。</p><p>我们可以使用 VSCode 自带的端口转发来解决这一问题。</p><p>首先关闭云服务器安全组（如果有的话）和系统防火墙中放行的<code>7888</code>端口。</p><p>将 VSCode 连接到你的服务器，然后转发<code>7888</code>端口到你的本地电脑即可。</p><h3 id="_3-7-可能有用-关于配置文件自动更新" tabindex="-1"><a class="header-anchor" href="#_3-7-可能有用-关于配置文件自动更新"><span>3.7 （可能有用）关于配置文件自动更新</span></a></h3><p>大部分情况下 Clash 的配置文件来自服务提供商，因此我们需要及时更新配置文件。</p><p>写个脚本定时执行就好啦：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#!/bin/bash</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">cd</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> [Clash的Docker-compose.yml所在目录]</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">wget</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -O</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ./data/config.yaml</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> [服务提供商提供的订阅链接]</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> restart</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> clash</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你细心观察的话还会发现，当重启<code>clash</code>容器后，<strong>允许来自局域网的连接</strong>这一设置可能会自动关闭。</p><p>这是由于你的服务提供商提供的配置文件中<code>allow-lan</code>这一字段为<code>false</code>造成的。</p><p>只需要在脚本<code>docker restart clash</code>前面一行添加：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">sed</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -i</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">s/allow-lan: false/allow-lan: true/</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ./data/config.yaml</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>将<code>false</code>替换为<code>true</code>即可。</p>`,33))])}const b=r(o,[["render",g]]),m=JSON.parse('{"path":"/article/i1wechty/","title":"Connect to Every Container：Docker 网络理论","lang":"zh-CN","frontmatter":{"title":"Connect to Every Container：Docker 网络理论","createTime":"2025/04/02 19:15:51","permalink":"/article/i1wechty/","tags":["Linux","Docker"],"description":"Docker 被广泛用于服务器上，为各种服务提供相对独立的轻量级运行环境，容器与容器之间互不影响。 而正是 Docker 容器的良好隔离性质，使得容器中的服务并不能直接访问到其他容器中的服务，导致各种不便。 而 Docker 网络同样是容器环境的一部分，将容器从宿主机的网络环境中独立出来，相互连接。 1 Docker 网络模式 Docker 提供了四种...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Connect to Every Container：Docker 网络理论\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-02T13:25:33.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://www.yoake.cc/article/i1wechty/"}],["meta",{"property":"og:site_name","content":"YOYOArticle"}],["meta",{"property":"og:title","content":"Connect to Every Container：Docker 网络理论"}],["meta",{"property":"og:description","content":"Docker 被广泛用于服务器上，为各种服务提供相对独立的轻量级运行环境，容器与容器之间互不影响。 而正是 Docker 容器的良好隔离性质，使得容器中的服务并不能直接访问到其他容器中的服务，导致各种不便。 而 Docker 网络同样是容器环境的一部分，将容器从宿主机的网络环境中独立出来，相互连接。 1 Docker 网络模式 Docker 提供了四种..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-02T13:25:33.000Z"}],["meta",{"property":"article:tag","content":"Docker"}],["meta",{"property":"article:tag","content":"Linux"}],["meta",{"property":"article:modified_time","content":"2025-04-02T13:25:33.000Z"}]]},"readingTime":{"minutes":7.41,"words":2224},"git":{"updatedTime":1743600333000,"contributors":[{"name":"YOAKE","username":"YOAKE","email":"yo2yoake@outlook.com","commits":1,"avatar":"https://avatars.githubusercontent.com/YOAKE?v=4","url":"https://github.com/YOAKE"}]},"autoDesc":true,"filePathRelative":"YOYOTech/250402-Docker网络理论.md","headers":[],"categoryList":[{"id":"e20ae0","sort":10002,"name":"YOYOTech"}]}');export{b as comp,m as data};
