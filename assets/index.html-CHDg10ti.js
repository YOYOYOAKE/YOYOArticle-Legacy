import{_ as d,c as l,d as p,a as o,b as e,w as i,r as n,o as r}from"./app-DcByCcgZ.js";const h={},m={class:"vp-file-tree"};function y(k,a){const s=n("VPIcon"),t=n("FileTreeNode"),c=n("CodeTabs");return r(),l("div",null,[a[0]||(a[0]=p(`<blockquote><p>TypeScript 开发者肯定对 <code>npm install @types/*</code>这个命令不陌生。是的，由于各种各样的原因，很多 npm 包并不是使用 TypeScript 编写的，这也就导致其缺少类型系统，难以获得 IDE 的类型推断支持。</p></blockquote><blockquote><p>因此出现了开源项目 <code>DefinitelyTyped</code>。该项目旨在为 JavaScript 编写的 npm 包提供高质量的 TypeScript 类型定义。任何人都可以为 JS npm 包添加类型定义，供社区中的所有人使用。</p></blockquote><blockquote><p>顺便，我也借着为 <code>@cesium-china/cesium-map</code>这个 JS npm 包添加类型定义的机会，阐述一下该如何规范地为开源项目贡献代码。</p></blockquote><p>为开源项目贡献代码，不能直接在原项目上修改。而是要将开源项目仓库（称为上游仓库，upstream repo）fork 到你的账号下，成为你自己的仓库（称为远程仓库，remote repo）。然后将远程仓库 clone 到本地（称为本地仓库，local repo），在此基础上进行修改。</p><p>因此一个规范的贡献流程是：</p><div class="vp-steps"><ol><li>将上游仓库 fork 到你的账号下，称为远程仓库。</li><li>将远程仓库 clone 到本地，称为本地仓库。</li><li>在本地仓库中创建一个开发分支，在开发分支上进行修改。</li><li>在修改过程中，如果有远程需求，可以随时提交到远程仓库中（注意不是上游仓库）。</li><li>在一切都修改、测试完成后，提交 PR 到上游仓库。</li></ol></div><h2 id="_1-创建开发分支" tabindex="-1"><a class="header-anchor" href="#_1-创建开发分支"><span>1 创建开发分支</span></a></h2><p>来到 <a href="https://github.com/DefinitelyTyped/DefinitelyTyped" target="_blank" rel="noopener noreferrer"><code>DefinitelyTyped/DefinitelyTyped</code></a> 仓库中，将其 fork 到你的账号下。</p><p><img src="https://oss.yoake.cc/yoyopics/article/250310-DefinitelyTyped/1741607484816.webp" alt="1741607484816"></p><p>操作完成后，你的账号下应该会多一个 <code>&lt;用户名&gt;/DefinitelyTyped</code>仓库，并且显示该仓库“forked from DefinitelyTyped/DefinitelyTyped”。</p><p><img src="https://oss.yoake.cc/yoyopics/article/250310-DefinitelyTyped/1741607593732.webp" alt="1741607593732"></p><p>使用 <code>git clone</code>命令将你的仓库克隆到本地，并使用 <code>git checkout -b</code>命令或者你喜欢的 Git 可视化工具创建一个新分支。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>再次进行三个仓库的辨析，因为这真的很重要。</p><p>此处的<strong>上游仓库</strong>为<code>DefinitelyTyped/DefinitelyTyped</code>仓库。</p><p>此处的<strong>远程仓库</strong>为<code>&lt;用户名&gt;/DefinitelyTyped</code>仓库。</p><p>此处的<strong>本地仓库</strong>为你克隆到本地的<code>&lt;用户名&gt;/DefinitelyTyped</code>仓库</p></div><blockquote><p>我真的推荐使用如 VSCode 或者 IDEA 等自带的 Git 可视化工具。2025年了，这些可视化工具已经能胜任绝大部分的 Git 任务，真没必要抱着命令行不放。</p></blockquote><p>于 <code>DefinitelyTyped</code>而言，其分支命名应该被你所要添加类型定义的 JS npm 包来决定。如果这个包名不包含“@”和“/”，那就以这个包的名字为分支名；否则，你应该按照下面的示例命名分支。</p><table><thead><tr><th>JS npm 包</th><th><code>DefinitelyTyped</code> 分支名</th></tr></thead><tbody><tr><td>example-package</td><td>example-package</td></tr><tr><td>@cesium-china/cesium-map</td><td>cesium-china__cesium-map</td></tr></tbody></table><p>也就是去掉“@”字符，并将“/”转为双下划线“__”。</p><p>然后在本地仓库的开发分支中进行修改。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>任何时候都不要直接修改主分支的代码！</p><p>主分支代码只能通过 PR 或 Merge 进行修改。</p></div><h2 id="_2-编写类型声明" tabindex="-1"><a class="header-anchor" href="#_2-编写类型声明"><span>2 编写类型声明</span></a></h2><p>按照<code>DefinitelyTyped</code>的规范，类型声明文件都应该存放至<code>/types/&lt;Package-name&gt;/</code>文件夹。</p><p>如我要贡献的<code>@cesium-china/cesium-map</code>的类型声明，其声明文件应该放在<code>/types/cesium-china__cesium-map/index.d.ts</code>中。</p><p>这里不建议自己添加类型声明文件，而是使用<code>dts-gen</code>来创建模板。</p><p>回到<code>DefinitelyTyped</code>，执行</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">pnpm</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> install</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -g</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> dts-gen</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">pnpx</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> dts-gen</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> –-dt</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> –-name</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> cesium-china__cesium-map</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -–template</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> module</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>此时你会发现，在对应的包文件夹中出现了一系列的文件。</p>`,26)),o("div",m,[e(t,{expanded:"",type:"folder",filename:"DefinitelyTyped",level:0},{icon:i(()=>[e(s,{name:"vscode-icons:default-folder"})]),default:i(()=>[e(t,{expanded:"",type:"folder",filename:"types",level:1},{icon:i(()=>[e(s,{name:"vscode-icons:folder-type-typings"})]),default:i(()=>[e(t,{expanded:"",type:"folder",filename:"cesium-china__cesium-map",level:2},{icon:i(()=>[e(s,{name:"vscode-icons:default-folder"})]),default:i(()=>[e(t,{type:"file",filename:"index.d.ts",level:3},{icon:i(()=>[e(s,{name:"vscode-icons:file-type-typescript"})]),_:1}),e(t,{type:"file",filename:"cesium-china__cesium-map-test.ts",level:3},{icon:i(()=>[e(s,{name:"vscode-icons:file-type-typescript"})]),_:1}),e(t,{type:"file",filename:"package.json",level:3},{icon:i(()=>[e(s,{name:"vscode-icons:file-type-node"})]),_:1}),e(t,{type:"file",filename:"tsconfig.json",level:3},{icon:i(()=>[e(s,{name:"vscode-icons:file-type-tsconfig"})]),_:1}),e(t,{type:"file",filename:".npmignore",level:3},{icon:i(()=>[e(s,{name:"catppuccin:npm-ignore"})]),_:1})]),_:1})]),_:1})]),_:1})]),a[1]||(a[1]=p('<ul><li><p><code>index.d.ts</code></p><p>类型声明文件。所有的类型声明都应该在该文件中得到定义或者被导入。</p></li><li><p><code>cesium-china__cesium-map-test.ts</code></p><p>单元测试文件，你应该在其中编写类型测试。（实测只要能通过编译就行）</p></li><li><p><code>package.json</code></p><p>包含该包的元数据，包括其名称、版本和依赖关系。需要注意的是，其<code>version</code>字段应该始终以<code>9999</code>为结尾，如<code>1.0.9999</code>。</p></li><li><p><code>tsconfig.json</code></p><p>此文件允许你在软件包中运行<code>tsc</code>。</p></li><li><p><code>.npmignore</code></p><p>指定哪些文件应包含在包中。</p></li></ul><h2 id="_3-正确处理外部依赖" tabindex="-1"><a class="header-anchor" href="#_3-正确处理外部依赖"><span>3 正确处理外部依赖</span></a></h2><p>我在外部依赖这方面踩了很多坑，因此不得不单独拿出来一部分来说明。</p><p>正如我的包名所言，其依赖于外部包<code>Cesium</code>中已经定义的类型。</p><p>因此我需要将其添加进<code>/types/cesium-china__cesium-map/package.json</code>的<code>dependencies</code>中。</p>',5)),e(c,{id:"209",data:[]}),a[2]||(a[2]=p('<p>但是这样是无法通过后续的单元测试的，因为<code>Cesium</code>这个包并不在<a href="https://github.com/microsoft/DefinitelyTyped-tools/blob/main/packages/definitions-parser/allowedPackageJsonDependencies.txt" target="_blank" rel="noopener noreferrer">允许的外部依赖项列表</a>中。</p><p>因此你需要向<code>microsoft/DefinitelyTyped-tools</code>这个仓库提交 PR，将<code>Cesium</code>添加进这个文件中。</p><p>审核完成后，该依赖项就会被允许，从而通过单元测试。</p><h2 id="_4-单元测试与格式化代码" tabindex="-1"><a class="header-anchor" href="#_4-单元测试与格式化代码"><span>4 单元测试与格式化代码</span></a></h2><p>在完成所有类型声明的编写后，需要进行单元测试，而后格式化代码。</p><p>回到<code>DifinitelyTyped</code>项目根目录下，安装项目及你的包所需的依赖。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">pnpm</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> install</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -w</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --filter</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">{./types/cesium-china__cesium-map}...</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>注意不能直接执行<code>pnpm install</code>，这会把这个仓库的依赖全部安装！</p></div><p>然后进行单元测试：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">pnpm</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> test</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> @cesium-china/cesium-map</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>测试结果会告知你是否通过，如果没有通过，会一并告知你原因。</p><p>单元测试通过后，还需要格式化代码。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">pnpm</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> dprint</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> fmt</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/types/cesium-china__cesium-map/*.ts</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这一步务必要执行，因为 DefinitelyTyped 十分严格，否则过不了 CI。</p><p>通过单元测试并格式化代码后，将你的代码 push 至远程仓库，准备提交 PR。</p><h2 id="_5-提交-pr、code-review-与合并" tabindex="-1"><a class="header-anchor" href="#_5-提交-pr、code-review-与合并"><span>5 提交 PR、Code Review 与合并</span></a></h2><p>提交 PR，会要求填写一份清单，按实际情况填写后提交即可。</p><p>然后 Github Actions 会自动运行 CI，没有问题的话，代码就会等待 Review，再之后就可以被合并进主分支。若 CI 未通过，则需要修复错误后重新提交。</p><p>代码完成合并的一到两个小时之内就会被发布到 npm 上。</p><p>此时即可使用<code>npm install --save @types/cesium-china__cesium-map</code>来为<code>@cesium-china/cesium-map</code>启用类型支持。</p><h2 id="_6-致谢" tabindex="-1"><a class="header-anchor" href="#_6-致谢"><span>6 致谢</span></a></h2><div style="text-align:center;"><p><strong>再次为所有开源项目开发者、维护者、贡献者致以最诚恳的敬意。</strong></p></div>',22))])}const f=d(h,[["render",y]]),u=JSON.parse('{"path":"/article/mqdx10ex/","title":"贡献开源代码：Definitely Typed 贡献小记","lang":"zh-CN","frontmatter":{"title":"贡献开源代码：Definitely Typed 贡献小记","createTime":"2025/03/10 19:29:41","permalink":"/article/mqdx10ex/","tags":["JavaScript / TypeScript"],"description":"TypeScript 开发者肯定对 npm install @types/*这个命令不陌生。是的，由于各种各样的原因，很多 npm 包并不是使用 TypeScript 编写的，这也就导致其缺少类型系统，难以获得 IDE 的类型推断支持。 因此出现了开源项目 DefinitelyTyped。该项目旨在为 JavaScript 编写的 npm 包提供高质量...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"贡献开源代码：Definitely Typed 贡献小记\\",\\"image\\":[\\"https://oss.yoake.cc/yoyopics/article/250310-DefinitelyTyped/1741607484816.webp\\",\\"https://oss.yoake.cc/yoyopics/article/250310-DefinitelyTyped/1741607593732.webp\\"],\\"dateModified\\":\\"2025-03-10T13:16:33.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://www.yoake.cc/article/mqdx10ex/"}],["meta",{"property":"og:site_name","content":"YOYOArticle"}],["meta",{"property":"og:title","content":"贡献开源代码：Definitely Typed 贡献小记"}],["meta",{"property":"og:description","content":"TypeScript 开发者肯定对 npm install @types/*这个命令不陌生。是的，由于各种各样的原因，很多 npm 包并不是使用 TypeScript 编写的，这也就导致其缺少类型系统，难以获得 IDE 的类型推断支持。 因此出现了开源项目 DefinitelyTyped。该项目旨在为 JavaScript 编写的 npm 包提供高质量..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://oss.yoake.cc/yoyopics/article/250310-DefinitelyTyped/1741607484816.webp"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-10T13:16:33.000Z"}],["meta",{"property":"article:tag","content":"JavaScript / TypeScript"}],["meta",{"property":"article:modified_time","content":"2025-03-10T13:16:33.000Z"}]]},"readingTime":{"minutes":5.38,"words":1615},"git":{"updatedTime":1741612593000,"contributors":[{"name":"YOAKE","username":"YOAKE","email":"yo2yoake@outlook.com","commits":1,"avatar":"https://avatars.githubusercontent.com/YOAKE?v=4","url":"https://github.com/YOAKE"}]},"autoDesc":true,"filePathRelative":"YOYOTech/250310-DefinitelyTyped.md","headers":[],"categoryList":[{"id":"e20ae0","sort":10002,"name":"YOYOTech"}]}');export{f as comp,u as data};
